vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        //1st window
        for(int i=0;i<k;i++){
            //remove smaller element
            while(!dq.empty()&&nums[i]>=nums[dq.back()]){
                dq.pop_back();
            }
            //inserting index, we check out of window element
            dq.push_back(i);
        }
        //store ans for 1st window
        ans.push_back(nums[dq.front()]);
        //process remaining window
        for(int i=k;i<nums.size();i++){
            //remove out of window element
            if(!dq.empty()&&i-dq.front()>=k){
                dq.pop_front();
            }
            //remove smaller element corresponding to curr element
            while(!dq.empty()&&nums[i]>=nums[dq.back()]){
                dq.pop_back();
            }
            //inserting index, we check out of window element
            dq.push_back(i);
            //store ans for curr window
            ans.push_back(nums[dq.front()]);
        }
        return ans;
    }